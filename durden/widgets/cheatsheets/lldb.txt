^lldb
---- Stopping ----
clear -- delete all bkpts
br s [--method -M] [name]
br s [--file fn --line n]
br del <breakpoint #>
wa s v name
wa s e -- <expr>

---- Stepping ----
n/ni [count] -- next/next instr.
thread until [loc] -- continue until
finish -- until frame return
thread return [expr]
thread jump [addr]
pro hand [-p,-n,-s bool] signal
register write pc '$pc+8'

---- Stack ----
frame variable --no-args (fr v -a)
target variable var (fr v -f x var)
thread backtrace (bt)
frame select num (fr s num)
frame select --relative num (fr s -rnum)

---- Execution ----
process launch -- < args >
process launch --tty=dev -- <args>
target create fn
target create --core corefile
kill
settings show target.run-args
settings [set,rem,show] target.env-vars var

---- Data ----
expr (int) printf("expr %d", 4+5)
print (int) printf("expr %d", 4+5)
expr (unsigned int) $var = expr;
disassemble --frame
x/sz [Nuf] expr [Nuf: b(1), h(2), w(4), g(8)]

---- Thread ----
thread list threads
thread num
thread apply all bt

---- Symbols ----
registers read
registers read --format binary rax
memory read

---- Special ----
gdb-remote [host:port]
process attach [--waitfor] [--name or --pid] val
target stop-hook add
memory read outfile startaddr endaddr
